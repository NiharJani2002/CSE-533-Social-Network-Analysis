# -*- coding: utf-8 -*-
"""SNA_Group_Project_Presentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lStwsEireNO10wgin1W_Go4JDeQJveRV

#FOR ANY OTHER USER, PLS MAKE A COPY OF THE COLLAB FILE AND TRY TO RUN ON YOUR OWN COLLAB, IF ANY ERROR PERSIST, THEN CONTACT AND CHANGE THE FILE, REASON BEING IT TAKES LARGE AMOUNT OF TIME TO RUN THE CODE, ANY MISTAKE MAY REMOVE OUR OUTPUT

```
Note: Pls install meta-members.csv file and member-edges.csv file and upload it in collab and run the code:
1) If I attach via drive, then it might ask password to the user and in the user drive, the dataset might not be present
2)If I attach via kaggle using opendataset library then the user might have to enter kaggle id and kaggle username, and I assuming user might not be introduced to kaggle

Member-edges.csv file link: 
https://drive.google.com/file/d/1gbD53-DRacNkf3amUCzyEWy8L5_DIR1f/view?usp=sharing

meta-members.csv: 
https://drive.google.com/file/d/1Q1PDAtVDG3Rf8HchdQKlyMWUVLyIP9vQ/view?usp=sharing

So, I am attaching the dataset link from google drive open to all Ahmedabad University people.
```

# Social Network Analysis of Meetup Network of Nashville Meetup Network

## Importing the required libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import seaborn as sns
import numpy as np
plt.style.use('fivethirtyeight')


import networkx as nx 
import matplotlib.pyplot as plt 
import numpy as np 
import pandas as pd 
import pylab as plt 
from itertools import count 
from operator import itemgetter 
from networkx.drawing.nx_agraph import graphviz_layout 
import pylab

"""## Reading Member-Member data"""

member_edges = pd.read_csv('member-edges.csv')
member_meta = pd.read_csv('meta-members.csv')

len(member_meta)

member_edges.head()

member_meta.head()

G = nx.path_graph(member_edges)
print(nx.is_connected(G))

A = nx.path_graph(member_meta )
print(nx.is_connected(A))

"""### Display of the member data with number of nodes and edges"""

no_of_nodes_edges = nx.from_pandas_edgelist(member_edges, 'member1', 'member2')
print('Number of nodes is:', len(no_of_nodes_edges.nodes))
print('Number of edges is:', len(no_of_nodes_edges.edges))

no_of_nodes_edges = nx.from_pandas_edgelist(member_meta, 'member_id', 'name','hometown')
print('Number of nodes is:', len(no_of_nodes_edges.nodes))
print('Number of edges is:', len(no_of_nodes_edges.edges))

"""## Taking Subset of data from the original dataset for the member file"""

member_edges_subset = member_edges[0:8000]

G_nodes = nx.from_pandas_edgelist(member_edges_subset, 'member1', 'member2', 'weight')
print('Number of nodes is:', len(G_nodes.nodes))
print('Number of edges is:', len(G_nodes.edges))

"""## Network Visualization of Member data"""

pd.options.display.max_rows = 40
G = nx.from_pandas_edgelist(member_edges_subset,'member1',"member2" , create_using = nx.Graph())

nodes = G.nodes()
degree = G.degree()
colors = [degree[n] for n in nodes]

pos = nx.kamada_kawai_layout(G)
cmap = plt.cm.summer
cmap = plt.cm.spring

vmin = min(colors)
vmax = max(colors)

fig = plt.figure(figsize = (10,8), dpi=70)

nx.draw(G,pos,alpha = 0.5, nodelist = nodes, node_color = 'w', node_size = 10, with_labels= False,font_size = 2,
        width = 0.5, cmap = cmap, edge_color ='#f1ea55')
fig.set_facecolor('#555500')

plt.show()

"""### Finding the degree of each node from member_edges data"""

for i in sorted(G_nodes.nodes()):
    G_nodes.nodes[i]['degree'] = G_nodes.degree(i)

node_degree = pd.DataFrame([i[1] for i in G_nodes.nodes(data=True)], index=[i[0] for i in G_nodes.nodes(data=True)])
node_degree = node_degree.sort_values(by='degree',ascending= False)
node_degree.index.names=['Actor']
node_degree.reset_index(level=0, inplace=True)

node_degree.head()

df_centrality_bet = nx.betweenness_centrality(G_nodes)
df_centrality_between = pd.DataFrame.from_dict(df_centrality_bet, orient='index')
df_centrality_between.columns = ['betweenness_centrality']
df_centrality_between.index.names = ['Actor']
df_centrality_between.reset_index(level=0, inplace=True)
centrality_data = pd.merge(node_degree,df_centrality_between, on = ['Actor'])

centrality_closeness = nx.closeness_centrality(G_nodes)
df_centrality_closeness = pd.DataFrame.from_dict(centrality_closeness, orient='index')
df_centrality_closeness.columns = ['closeness_centrality']
df_centrality_closeness.index.names = ['Actor']
df_centrality_closeness.reset_index(level=0, inplace=True)
centrality_data= pd.merge(centrality_data, df_centrality_closeness, on = ['Actor'])

centrality_eigen = nx.eigenvector_centrality_numpy(G_nodes)
df_centrality_eigen = pd.DataFrame.from_dict(centrality_eigen, orient='index')
df_centrality_eigen.columns = ['eigenvector_centrality']
df_centrality_eigen.index.names = ['Actor']
df_centrality_eigen.reset_index(level=0, inplace=True)
centrality_data= pd.merge(centrality_data, df_centrality_eigen, on = ['Actor'])

degree_centrality = nx.degree_centrality(G_nodes)
df_centrality_degree = pd.DataFrame.from_dict(degree_centrality, orient='index')
df_centrality_degree.columns = ['degree_centrality']
df_centrality_degree.index.names = ['Actor']
df_centrality_degree.reset_index(level=0, inplace=True)
centrality_data= pd.merge(centrality_data, df_centrality_degree, on = ['Actor'])

centrality_data.head()

"""## Network Visualization of Degree Centrality"""

pos = nx.spring_layout(G_nodes)
node_color = [20000.0 * G_nodes.degree(v) for v in G_nodes]
node_size =  [v * 10000 for v in degree_centrality.values()]
plt.style.use('classic')
plt.rcParams['figure.figsize'] = (20, 15)
nx.draw_networkx(G_nodes, pos=pos, with_labels=False,
                 node_color=node_color,
                 node_size=node_size )
plt.axis('off')
sorted(degree_centrality, key=degree_centrality.get, reverse=True)[:5]

"""## Network Visualization of Betweenness Centraltity"""

pos = nx.kamada_kawai_layout(G_nodes)
node_color = [20000.0 * G_nodes.degree(v) for v in G_nodes]
node_size =  [v * 10000 for v in df_centrality_bet.values()]
plt.style.use('fivethirtyeight')
plt.rcParams['figure.figsize'] = (20, 15)
nx.draw_networkx(G_nodes, pos=pos, with_labels=False,
                 node_color=node_color,
                 node_size=node_size )
plt.axis('off')
sorted(df_centrality_bet, key=df_centrality_bet.get, reverse=True)[:5]

"""## Network Visualization of Closeness Centrality"""

pos = nx.spring_layout(G_nodes)
node_color = [20000.0 * G_nodes.degree(v) for v in G_nodes]
node_size =  [v * 1000 for v in centrality_closeness.values()]
plt.style.use('fivethirtyeight')
plt.rcParams['figure.figsize'] = (20, 15)
nx.draw_networkx(G_nodes, pos=pos, with_labels=False,
                 node_color=node_color,
                 node_size=node_size )
plt.axis('on')
sorted(centrality_closeness, key=centrality_closeness.get, reverse=True)[:5]

"""## Network Visualization of Eigenvector Centrality """

pos = nx.spring_layout(G_nodes)
node_color = [20000.0 * G_nodes.degree(v) for v in G_nodes]
node_size =  [v * 10000 for v in centrality_eigen.values()]
plt.style.use('classic')
plt.rcParams['figure.figsize'] = (20, 15)
nx.draw_networkx(G_nodes, pos=pos, with_labels=False,
                 node_color=node_color,
                 node_size=node_size )
plt.axis('off')
sorted(centrality_eigen, key=centrality_eigen.get, reverse=True)[:5]